<Project>

  <!-- Import Directory.Build.Props -->
  <Import Project="$(MSBuildThisFileDirectory)..\Directory.Build.props" />

  <PropertyGroup>
    <IsTestProject>true</IsTestProject>
    <IsUnitTestProject>true</IsUnitTestProject>
    <TestDependsOnAspNetPackages>false</TestDependsOnAspNetPackages>
    <TestDependsOnAspNetAppPackages>false</TestDependsOnAspNetAppPackages>
    <TestDependsOnAspNetRuntime>false</TestDependsOnAspNetRuntime>
    <ContainsFunctionalTestAssets>false</ContainsFunctionalTestAssets>
    <BuildHelixPayload>false</BuildHelixPayload>
    <PackageVersion>$(VersionPrefix)$(VersionSuffix)</PackageVersion>
  </PropertyGroup>

  <Target Name="Restore">
    <Message Text="Restoring NPM packages..." Importance="high" />
    <Exec Command="npm ci" WorkingDirectory="$(MSBuildThisFileDirectory).." />
  </Target>

  <Target Name="Build">
    <Message Text="Building NPM packages..." Importance="high" />
    <Exec Command="npm run build" WorkingDirectory="$(MSBuildThisFileDirectory).." />
  </Target>

  <Target Name="_Test" BeforeTargets="Test">
    <Message Text="Testing NPM packages..." Importance="high" />
    <Exec Command="npm run test" ContinueOnError="true" WorkingDirectory="$(MSBuildThisFileDirectory).." />
  </Target>

  <Target Name="Pack">
    <Message Text="Packing NPM packages..." Importance="high" />
    <MakeDir Directories="$(PackageOutputPath)" Condition="!Exists('$(PackageOutputPath)')" />
    <Exec Command="node $(MSBuildThisFileDirectory)scripts\pack-workspace.js $(RepoRoot)package.json $(PackageVersion) $(PackageOutputPath)" />
  </Target>

  <Target Name="_GetPackageVersionInfo" Returns="@(_NodePackageNameAndVersions)">
    <!-- 
    <Exec Command="npm run get-version" ConsoleToMsBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="_GetNpmVersionOutput" />
    </Exec>
    <ItemGroup>
      <_FilteredNpmVersionOuput Include="@(_GetNpmVersionOutput)" Condition="'%(Identity)' == '' or $([System.String]::Copy('%(Identity)').StartsWith('>')) " />
      <_NodePackageNameAndVersions Include="@(_GetNpmVersionOutput)"  Exclude="@(_FilteredNpmVersionOuput)">
      </_NodePackageNameAndVersions>
      <_NodePackageNameAndVersions Condition="$([System.String]::new('%(_NodePackageNameAndVersions.Identity)').Contains(';'))">
        <PackageName>$([System.String]::new('%(_NodePackageNameAndVersions.Identity)').Split(';')[0])</PackageName>
        <PackageVersion>$([System.String]::new('%(_NodePackageNameAndVersions.Identity)').Split(';')[1])</PackageVersion>
      </_NodePackageNameAndVersions>
    </ItemGroup>

    <Message Text="Computed package version info: %(_NodePackageNameAndVersions.PackageName)=%(_NodePackageNameAndVersions.PackageVersion)" Importance="high" />
    -->
    <ItemGroup>
      <_NodePackageNameAndVersions>
        <PackageVersion>$(PackageVersion)</PackageVersion>
      </_NodePackageNameAndVersions>
    </ItemGroup>
  </Target>

  <!-- Import Directory.Build.targets -->
  <Import Project="$(MSBuildThisFileDirectory)..\Directory.Build.targets" />

</Project>
