name: Issue Handler

on:
  workflow_dispatch:
  issues:
    types: [opened, labeled, unlabeled]
  issue_comment:
    types: [created]

jobs:
  labeler:
    runs-on: ubuntu-latest
    steps:

    - name: Handle Issues
      uses: jvalkeal/issue-handler@v0.0.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        config: >
          {
            "data": {
              "team": [
                "jvalkeal",
                "oodamien",
                "ilayaperumalg",
                "sabbyanandan",
                "tzolov",
                "chrisjs",
                "cppwfs",
                "mminella",
                "dturanski",
                "onobc",
                "claudiahub",
                "sobychacko",
                "corneil"
              ]
            },
            "recipes": [
              {
                "name": "Mark new issue to get triaged",
                "type": "ifThen",
                "if": "isAction('opened') && !dataInArray('team', actor)",
                "then": "labelIssue(['status/need-triage'])"
              },
              {
                "name": "Switch to team if user comments",
                "type": "ifThen",
                "if": "isEvent('issue_comment') && isAction('created') && actor == context.payload.issue.user.login && labelsContainsAny('status/need-feedback')",
                "then": "[labelIssue('for/team-attention'), removeLabel('status/need-feedback')]"
              },
              {
                "name": "Switch to user if team comments",
                "type": "ifThen",
                "if": "isEvent('issue_comment') && isAction('created') && dataInArray('team', actor) && labelsContainsAny('for/team-attention') ",
                "then": "[labelIssue('status/need-feedback', removeLabel('for/team-attention'))]"
              },
              {
                "name": "Manage backport issues",
                "type": "manageBackportIssues",
                "whenLabeled": "labeledStartsWith(['branch/'])",
                "whenUnlabeled": "labeledStartsWith(['branch/'])",
                "whenLabels": "labelsContainsAny(['for/backport'])",
                "fromLabels": "labeledStartsWith(['branch/'])",
                "additionalLabels": "'type/backport'",
                "body": "'Backport #' + number"
              }
            ]
          }
